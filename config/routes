/static StaticR Static appStatic
/auth   AuthR   Auth   getAuth

/favicon.ico FaviconR GET
/robots.txt RobotsR GET

/ HomeR GET

-- Note about PUT: I'll probably phase this out in favor of adding more routes
-- and using POST requests on those routes. The reason to do so is in order to
-- unify the browser-based and mobile implementation. The browser, without AJAX,
-- cannot use PUT or DELETE actions, only GET and POST (through forms). We don't
-- want to make JavaScript a *necessity* to use our application (and the less we
-- can rely on it, the better), so our design should start off with JS-free
-- compatible code wherever possible.

-- Note about deletion: though deletion routes remove a resource, we do not
-- actually delete the resource itself. The URL resource will of course be gone,
-- but the data will be preserved either in logs, or by simply flagging that
-- resource as inactive on the server-side, leading to the appearance of
-- deletion on the client-side.
-- True deletion of data, and how *much* such routes should delete are pending.
-- The takeaway to note here though, is that when you DELETE something, you can
-- almost guarantee that the full information of that resource will be preserved
-- elsewhere.

--
-- ## User
--

-- User-creation, self-querying, and self-updating. Cannot query or modify any
-- User other than oneself (since the User entity is used solely for
-- identification/authentication, rights-management, and contact-information).
/user UserR GET POST
/user/update UpdateUserR POST

--
-- ## Profile
--

-- A user profile. We may modify this to accept a ProfileId instead, or perhaps
-- be agnostic to either, accepting a UserId or ProfileId; we'll just have to
-- see how the design grows.
/profile/#UserId ProfileR GET PUT

--
-- ## Friendships
--

/user/#UserId/friendships FriendshipsR GET

/friendRequest/#UserId/create CreateFriendRequestR POST
/friendRequest/#UserId/cancel CancelFriendRequestR POST
/friendRequest/#UserId/accept AcceptFriendRequestR POST
-- /friendRequest/#UserId/reject RejectFriendRequestR POST


--
-- ## Conversations
--

-- See your active conversations, and create a new one.
/conversations ConversationsR GET POST

-- View the contents of a conversation, and add a new message.
/conversations/#ConversationId ConversationContentsR GET POST

-- Currently works on adding people who have either never been a part of the
-- conversation, or who have since left it. Later versions will require the
-- consent of the user to rejoin if they have left the conversation, in order
-- to respect their wishes to not be a part of a conversation.
/conversations/#ConversationId/add-user/#UserId ConversationAddUserR POST
