-- TODO:

-- Figure out if it's better for like entities to be separated to be specific
-- to comments or posts, or to be consolidated into a single Like entity with
-- NULLable fields referring either to a CommentId or PostId, as it is now.


-- Search for #EntityName# if you want to instantly be taken to a data entity.
--------------------------------------------------------------------------------

------------------------------------USER INFO-----------------------------------

--------------------------------------------------------------------------------
--#User#

-- | Currently the User entity should contain only critically identifying pieces
-- of information. The intent is to restrict access to the User entity to anyone
-- who isn't themselves that user.

User json
    ident Text -- For Auth through Yesod

    email Text -- must be unique
    password Text

    lastCheckedNotifications UTCTime default=now() -- the last time a user
      -- checked their notifications. This field should have its own route to
      -- query, and ought to be called each time the client renders the
      -- notification tab, in order to display the correct number of unread
      -- notifications.

    createdAt UTCTime

    UniqueUser ident
    UniqueUserEmail email

    deriving Typeable Eq Show
--------------------------------------------------------------------------------
--#UserLog#

UserLog
    user UserId

    action UserUpdate -- UpdateIdent, UpdateEmail, UpdatePassword

    update UserUpdate SafeToRemove

    createdAt UTCTime

--------------------------------------------------------------------------------
--#Profile# ; data: Gender

-- Here's the dilemma: When a client accesses a user's profile that is other
-- than the logged-in user's own profile, we must, of course, query and get that
-- other user's information, which means that it will end up in the current
-- client. This is obviously a no-go if we're sending the whole user entity, as
-- that contains private information about the user.

-- It may be wise to circumvent a whole class of privacy concerns by making the
-- Profile entity the Public-facing User entity, containing *only* those fields
-- that a User has decided to make public (under a particular permission
-- regime).

Profile json
    user UserId

    firstName Text
    lastName Text

    dateOfBirth Day

    gender Gender

    createdAt UTCTime default=now() -- redundant, given the User entity:
      -- a User and Profile are created at the same time by postUsersR, and
      -- therefore we don't need this field here.
      -- That said, for the sake of simplicity, it costs very little to include
      -- this rather standard field.

    UniqueProfile user -- We can easily fetch any user's profile by using their
      -- UserId.

--------------------------------------------------------------------------------
--#ProfileLog# ; data: UserUpdate

-- | Prevents data loss from meaningful changes to the Profile entity. Currently
-- omits logging of LogIns and LogOuts, as that seems a bit overboard;
-- however it may be worth discussing the potential value of such a feature.
--
-- Every log action here is an UPDATE.

ProfileLog
    profile ProfileId

    action ProfileUpdate -- UpdateFirstName, UpdateLastName, UpdateEmail,
      -- UpdateDateOfBirth, UpdateGender.
    previousValue Text -- the previous value of the field that was changed.
      -- all values are converted to text so that we don't have to use multiple
      -- fields to satisfy differing data types.

    createdAt UTCTime -- These logs are recorded at the same time a change
      -- is made. Hence, this is the timestamp of the change.

    user UserId SafeToRemove


--------------------------------------------------------------------------------
--#ProfileOptions#

-- | One example of options would be a user's display preferences for their
-- profile in terms of what personal information they want to show on their
-- wall.

-- Leaving this un-implemented for now, while I wait to figure out how to best
-- structure this model.

--------------------------------------------------------------------------------
--#Friendship#

-- when a user sends a friend request, what they are really doing is creating a
-- Friendship entity, with isActive and isRequest both set to True. isRequest is
-- what tells us that this is to be treated as a Friend Request, and *not* a
-- friendship; I explain why we use the same entity for both in the entity
-- description above.

-- We could choose to create a separate entity for friendship requests, but it
-- would only really make sense as a transitory data structure. The whole point
-- of a friendship is showing a relationship between two users, so we might as
-- well roll the request together with the friendship entity itself, since it
-- relies upon precisely the same data.

Friendship json
    firstUser UserId -- This *must always* be the user who *sent* the friend
      -- request
    secondUser UserId

    -- It's possible that all of our current functionality can be wrapped up
    -- into making isActive a nullable field, where null represents that it is
    -- a friend request, False represents not being friends and this not being
    -- a request either, and True represents them being friends.
    --
    -- It doesn't appear like we would use the additional fourth indicator that
    -- isActive = True, isRequest = True, would give us. So with only three
    -- options: Friends, not Friends, a Request, a Maybe Bool seems appropriate.
    --
    -- That said, it *is* much clearer what's going on when we make things
    -- explicit as we do here, and so I'll stick with this model for now and
    -- leave this note here for future consideration.

    isActive Bool -- are these users actually friends?

    isRequest Bool -- does this entity denote a Friend Request rather than a
      -- Friendship? INVARIANT: isActive should *never* be True while this field
      -- is True. You shouldn't be able to send a friend request if you are
      -- already friends.



    isJustRequest Bool SafeToRemove


    createdAt UTCTime

    UniqueFriendship firstUser secondUser
    UniqueFriendship' secondUser firstUser -- the opposite permutation prevents
      -- the possibility of the secondUser sending a friend request to the
      -- first, which wouldn't make any sense.

    deriving Show
--------------------------------------------------------------------------------
--#FriendshipLog# ; data: FriendshipAction

-- | The idea with this is to make sure that we have a full history of any
-- Friendship-level actions.
-- Logging will only occur when a field in Friendship is overwritten.

FriendshipLog
    friendship FriendshipId
    user UserId -- who performed the action

    action FriendshipAction -- CreateRequest, CancelRequest, AcceptRequest,
      -- RejectRequest, or Defriend.

    createdAt UTCTime

    timestamp UTCTime SafeToRemove

--------------------------------------------------------------------------------

----------------------------------NOTIFICATIONS---------------------------------

--------------------------------------------------------------------------------
--#Notification#

Notification
    user UserId

    type NotificationType -- without this field, we'd have to start with the
      -- more specific notifications, such as FriendshipNotification, and then
      -- lookup the notification Id in this table. This is typically not the
      -- direction we'd like to go in: rather, we want to know what type of
      -- notification we have, and then join with the more specific type to get
      -- unique information that pertains to that type of notification.

    seen Bool -- has the user looked at this notification?

    createdAt UTCTime

--------------------------------------------------------------------------------
--#FriendRequestNotification#

FriendRequestNotification
    notification NotificationId

    sentBy UserId -- who sent the friend request

    ignoring Bool -- set to True if a User would like to ignore the friend
      -- request, which does not cancel it, but prevents it from showing up
      -- in their pending friend requests tab.


--------------------------------------------------------------------------------
--#ConversationNotification#

ConversationNotification
    notification NotificationId

    conversation ConversationId

--------------------------------------------------------------------------------

----------------------------------CONVERSATIONS---------------------------------

--------------------------------------------------------------------------------
--#ConversationUser#

-- | Points a User to a Conversation. When created the isActive field will be
-- true, indicating that they will receive updates to the conversation and it
-- will remain visible to them.

ConversationUser json
    conversation ConversationId
    user UserId

    isActive Bool -- This field determines if the user will have the
      -- conversation displayed in their messages tab within the App.
      -- See documentation for more information on how this field is used.

    createdAt UTCTime

    updatedAt UTCTime Maybe SafeToRemove -- Allowed fields: isActive.
      -- If this field is not null, and isActive is false, the user de-activated
      -- the conversation at this time; if isActive is true, then the user at
      -- one point de-activated the conversation, and re-activated it at this
      -- time.

    UniqueConversationUser conversation user -- only 1 user per conversation

--------------------------------------------------------------------------------
--#ConversationMessage#

-- | A single conversation contains 1 or more messages. This table contains
-- each message, along with the Conversation it points to.

ConversationMessage json
    conversation ConversationId
    content Text
    author UserId

    createdAt UTCTime


    updatedAt UTCTime Maybe SafeToRemove -- Allowed fields: message(?).
        -- non-null entries in this field will indicate the time the last edit
        -- was made to a message (supposing we allow edits)

--------------------------------------------------------------------------------
--#Conversation#

-- | The entries for this table are sparse. That's because it will be used in
-- SQL Joins to link between the ConversationUsers and ConversationMessages.
-- See the documentation for more information.

Conversation json
    createdAt UTCTime SafeToRemove -- already logged in ConversationLog

    lastUpdated UTCTime -- shows us how fresh a conversation is, which is
      -- useful for sorting conversations on the client-side, as we want to sort
      -- by the activity of a conversation rather than how old it is.

    -- The following two fields are possible efficiency additions:
    -- latestMessage Text
    -- writtenBy UserId
    -- The idea would be to add each new message to the Conversation Entity as
    -- well, along with who wrote it. This functionality is already a part of
    -- the ConversationMessage Entity, but by duplicating it here we'd cut down
    -- on having to query for the latest ConversationMessage when rendering
    -- a User's active conversations on the app's messaging tab.
    --
    -- For now, I'll rely on the querying method, but later on this may be worth
    -- profiling against the solution outlined above, to decide on the most
    -- performant implementation.

    updatedAt UTCTime Maybe SafeToRemove
      -- this field will be updated every time a new message is posted to the
      -- conversation.
      -- Depending on how well this works, we may want to get rid of this field
      -- entirely and get this information solely from the most recent
      -- ConversationMessage entity.

--------------------------------------------------------------------------------
--#ConversationLog#

ConversationLog
    conversation ConversationId
    user UserId

    action ConversationAction -- Actions: AddNewConversationUser,
      -- ReinviteConversationUser, CreateNewConversation

    actionTo UserId Maybe -- who was the recipient of the action, if any. needed
      -- for actions such as AddNewUser and ReinviteUser, which have a causer,
      -- the ConversationLogUser, and a receiver, ConversationLogActionTo.

    createdAt UTCTime

--------------------------------------------------------------------------------

--------------------------------NEWS FEED / WALLS-------------------------------

--------------------------------------------------------------------------------
--#WallMessage#

-- | So this is a new model idea for wall posts and comments, since each
-- basically represents almost the exact same information, and are
-- interchangeable except for the Wall Post is a parent to the Wall Comments.

WallMessage
    profile ProfileId Maybe -- wall posts are linked to a profile, most commonly
      -- to the user's own profile. Wall comments do not use this field.
    parent WallMessageId Maybe -- to link comments to a post; Nothing signifies
      -- that this is a Wall Post, Just wmid indicates that this is a comment
      -- on the Wall Post referenced by wmid.

    author UserId

    content Text

    likeCount Int
    whoLiked [UserId]

    createdAt UTCTime

--------------------------------------------------------------------------------
--#WallComment#

-- | This table references Wall Comments to an actual WallPost (identified by
-- the WallPost table). This is a many-to-one relationship.

-- Currently lacks support for Media types.

WallPostComment json
    post WallPostId
    content Text
    author UserId

    likeCount Int

    -- Unimplemented but we may want to allow for nested comments.
    --nestedUnder PostCommentId Maybe -- Used only if this comment is nested
      -- under another comment, rather than being a top-level comment to the
      -- Post itself.

    createdAt UTCTime
    lastEdited UTCTime Maybe

    updatedAt UTCTime Maybe SafeToRemove -- Allowed fields: content(?).

--------------------------------------------------------------------------------
--#WallPost#

-- Not named "Post" in order to avoid name-conflicts with the HTTP POST method.
-- Currently lacks support for Media types.

WallPost json
    author UserId
    content Text

    commentCount Int
    likeCount Int

    createdAt UTCTime
    updatedAt UTCTime Maybe SafeToRemove -- Allowed fields: content(?).

--------------------------------------------------------------------------------

--------------------------------------MEDIA-------------------------------------

--------------------------------------------------------------------------------
--#Image#

Image
    content ByteString
    title Text Maybe -- "Untitled" if NULL
    uploadedBy UserId

--------------------------------------------------------------------------------
--#Video#

Video
    content ByteString
    title Text Maybe -- "Untitled" if NULL
    uploadedBy UserId
